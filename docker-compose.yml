version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: smpp_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: smpp_subscriptions
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smpp_network

  redis:
    image: redis:7-alpine
    container_name: smpp_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smpp_network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smpp_app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: smpp_subscriptions
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password
      JWT_SECRET: your-256-bit-secret-key-for-jwt-token-generation
      ENCRYPTION_KEY: your-256-bit-encryption-key
      ENCRYPTION_SALT: your-salt-value
    ports:
      - "8080:8080"
      - "9090:9090"  # Prometheus metrics
    volumes:
      - ./logs:/app/logs
    networks:
      - smpp_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: smpp_frontend
    restart: unless-stopped
    depends_on:
      - app
    environment:
      REACT_APP_API_URL: http://localhost:8080
      NODE_ENV: production
    ports:
      - "3000:80"
    networks:
      - smpp_network

  prometheus:
    image: prom/prometheus:latest
    container_name: smpp_prometheus
    restart: unless-stopped
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9091:9090"
    networks:
      - smpp_network

  grafana:
    image: grafana/grafana:latest
    container_name: smpp_grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3001:3000"
    networks:
      - smpp_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  smpp_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16